{"version":3,"file":"http.service.js","sourceRoot":"","sources":["../../src/sources/http.service.ts"],"names":[],"mappings":";;;;AACA,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EAAE,UAAU,EAAY,MAAM,MAAM,CAAC;AAG5C,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AAC/B,OAAO,KAAqC,MAAM,OAAO,CAAC;AAE1D,MAAM;;4BAEkE,EAAE;;;;;;;;IAE/D,IAAI,CAAC,IAAY,EAAE,MAAc,EAAE,IAAwB;;QAC9D,IAAI,MAAM,GAAuB;YAC7B,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,eAAe,CAAC,GAAG,GAAG,IAAI;YACxD,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI,IAAI,IAAI;YAClB,OAAO,EAAE;gBACL,cAAc,EAAE,0BAA0B;gBAC1C,MAAM,EAAE,0BAA0B;aACrC;SACJ,CAAC;QAEF,IAAI,MAAM,KAAK,KAAK,EAAE;YAClB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE;;gBAC1B,IAAI,GAAG,GAAG,IAAI,UAAU,CAAC,CAAC,QAAiC,EAAE,EAAE;oBACvD,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC;yBAChB,IAAI,CAAC,CAAC,QAAa,EAAE,EAAE;wBACpB,QAAQ,CAAC,IAAI,mBAAC,QAAQ,CAAC,IAAqB,EAAC,CAAC;wBAC9C,QAAQ,CAAC,QAAQ,EAAE,CAAC;qBACvB,CAAC;yBACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;wBACb,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;qBACzB,CAAC,CAAA;iBACT,CAAC,CAAC,IAAI,CACH,GAAG,CAAC,GAAG,EAAE;oBACL,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;iBAClC,CAAC,EACF,KAAK,EAAE,CACV,CAAC;gBACN,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;gBAE9B,OAAO,GAAG,CAAC;aACd;YAED,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SAClC;QAED,OAAO,IAAI,UAAU,CAAC,CAAC,QAAiC,EAAE,EAAE;YACpD,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC;iBAChB,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;gBACf,QAAQ,CAAC,IAAI,mBAAC,QAAQ,CAAC,IAAqB,EAAC,CAAC;gBAC9C,QAAQ,CAAC,QAAQ,EAAE,CAAC;aACvB,CAAC;iBACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;gBACb,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aACzB,CAAC,CAAA;SACT,CAAC,CAAC,IAAI,CACH,GAAG,CAAC,GAAG,EAAE;YACL,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SAClC,CAAC,EACF,KAAK,EAAE,CACV,CAAC;;CAEb","sourcesContent":["import { IDocumentResource } from '../interfaces/data-object';\nimport { share, tap } from 'rxjs/operators';\nimport { Observable, Observer } from 'rxjs';\nimport { IDocumentData } from '../interfaces/document';\nimport { IHttp } from '../interfaces/http';\nimport { Core } from '../core';\nimport axios, { AxiosRequestConfig, Method } from 'axios';\n\nexport class Http implements IHttp {\n    // NOTE: GET requests are stored in a this object to prevent duplicate requests\n    public get_requests: { [key: string]: Observable<IDocumentData> } = {};\n\n    public exec(path: string, method: Method, data?: IDocumentResource): Observable<IDocumentData> {\n        let config: AxiosRequestConfig = {\n            url: Core.me.injectedServices.rsJsonapiConfig.url + path,\n            method: method,\n            data: data || null,\n            headers: {\n                'Content-Type': 'application/vnd.api+json',\n                Accept: 'application/vnd.api+json'\n            }\n        };\n\n        if (method === 'get') {\n            if (!this.get_requests[path]) {\n                let obs = new Observable((observer: Observer<IDocumentData>) => {\n                        axios.request(config)\n                            .then((response: any) => {\n                                observer.next(response.data as IDocumentData);\n                                observer.complete();\n                            })\n                            .catch((error) => {\n                                observer.error(error);\n                            })\n                    }).pipe(\n                        tap(() => {\n                            delete this.get_requests[path];\n                        }),\n                        share()\n                    );\n                this.get_requests[path] = obs;\n\n                return obs;\n            }\n\n            return this.get_requests[path];\n        }\n\n        return new Observable((observer: Observer<IDocumentData>) => {\n                axios.request(config)\n                    .then((response) => {\n                        observer.next(response.data as IDocumentData);\n                        observer.complete();\n                    })\n                    .catch((error) => {\n                        observer.error(error);\n                    })\n            }).pipe(\n                tap(() => {\n                    delete this.get_requests[path];\n                }),\n                share()\n            );\n    }\n}\n"]}