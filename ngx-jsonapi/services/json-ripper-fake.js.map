{"version":3,"file":"json-ripper-fake.js","sourceRoot":"","sources":["../../src/services/json-ripper-fake.ts"],"names":[],"mappings":";;;;;;;;;;;;AASA,MAAM;;uBACwB,KAAK;;;;;;;IAElB,WAAW,CAAC,GAAW,EAAE,UAAyB,EAAE;;YAC7D,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,iBAAiB,EAAE,CAAC,EAAE,EAAE,CAAC;;;;;;;;IAGnD,qBAAqB,CAAC,QAAkB,EAAE,UAAyB,EAAE;;YAC9E,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;;;;;;;;IAGvC,aAAa,CAAC,GAAW,EAAE,UAAyB,EAAE;;YAC/D,OAAO,EAAE,IAAI,oBAAiC,EAAE,CAAA,EAAE,iBAAiB,EAAE,CAAC,EAAE,CAAC;;;;;;;;;IAGtE,cAAc,CAAC,GAAW,EAAE,UAA8B,EAAE,UAAyB,EAAE;;;;;;IAEjF,YAAY,CAAC,QAAkB,EAAE,OAAO,GAAG,EAAE;;;;;;;;;IAEnD,MAAM,CAAC,kBAAkB,CAAC,GAAW,EAAE,QAAkB,EAAE,UAAyB,EAAE;QACzF,OAAO,EAAE,CAAC;;;;;;IAGD,mBAAmB,CAAC,cAAsB;;;CAC1D","sourcesContent":["import { ICacheableDataResource } from './../interfaces/data-resource';\nimport { IRipper } from './json-ripper.interface';\nimport { ICacheableDataCollection } from '../interfaces/data-collection';\nimport { ICacheableDocumentResource } from '../interfaces/data-object';\nimport { Resource } from '../resource';\nimport { DocumentResource } from '../document-resource';\nimport { IDataProvider, IElement } from '../data-providers/data-provider';\nimport { DocumentCollection } from '../document-collection';\n\nexport class JsonRipperFake implements IRipper {\n    public readonly enabled = false;\n\n    public async getResource(key: string, include: Array<string> = []): Promise<ICacheableDocumentResource> {\n        return { data: { id: '', type: '', cache_last_update: 0 } };\n    }\n\n    public async getResourceByResource(resource: Resource, include: Array<string> = []): Promise<ICacheableDocumentResource> {\n        return this.getResource(resource.type, include);\n    }\n\n    public async getCollection(url: string, include: Array<string> = []): Promise<ICacheableDataCollection> {\n        return { data: <Array<ICacheableDataResource>>[], cache_last_update: 0 };\n    }\n\n    public saveCollection(url: string, collection: DocumentCollection, include: Array<string> = []): void {}\n\n    public async saveResource(resource: Resource, include = []): Promise<void> {}\n\n    public static toResourceElements(key: string, resource: Resource, include: Array<string> = []): Array<IElement> {\n        return [];\n    }\n\n    public async deprecateCollection(key_start_with: string): Promise<void> {}\n}\n"]}